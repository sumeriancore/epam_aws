AWSTemplateFormatVersion: 2010-09-09
Description: Epam AWS CloudFormation Template with full Secrets Manager Integration for RDS Credentials.

Parameters:
  StepanOvsyannikovAMI:
    Type: String
    Default: ami-018679b5611794121
    Description: AMI ID for the EC2 instances.
  StepanOvsyannikovInstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for the application.
  RDSDBName:
    Type: String
    Default: postgres
    Description: Name for the RDS PostgreSQL database.
  RDSMasterUsername:
    Type: String
    Default: postgres
    Description: Master username for the RDS PostgreSQL database.
  RDSMasterPassword:
    Type: String
    Description: Master password for the RDS PostgreSQL database. This will be stored securely in Secrets Manager.
    NoEcho: true # Prevents password from being displayed in CloudFormation console or logs.

Resources:
  StepanOvsyannikovNetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-Network

  StepanOvsyannikovInternetGateWay:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-InternetGateWay

  StepanOvsyannikovVPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref StepanOvsyannikovInternetGateWay
      VpcId: !Ref StepanOvsyannikovNetwork

  StepanOvsyannikovPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [0, !GetAZs "us-east-1"]
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PublicSubnet-A

  StepanOvsyannikovPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [1, !GetAZs "us-east-1"]
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PublicSubnet-B

  StepanOvsyannikovPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.13.0/24
      AvailabilityZone: !Select [0, !GetAZs "us-east-1"]
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PrivateSubnet-A

  StepanOvsyannikovPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.14.0/24
      AvailabilityZone: !Select [1, !GetAZs "us-east-1"]
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PrivateSubnet-B

  StepanOvsyannikovRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-RouteTable

  StepanOvsyannikovRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref StepanOvsyannikovRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref StepanOvsyannikovInternetGateWay

  StepanOvsyannikovSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StepanOvsyannikovPublicSubnetA
      RouteTableId: !Ref StepanOvsyannikovRouteTable

  StepanOvsyannikovSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StepanOvsyannikovPublicSubnetB
      RouteTableId: !Ref StepanOvsyannikovRouteTable

  StepanOvsyannikovPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PrivateRouteTable

  StepanOvsyannikovPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StepanOvsyannikovPrivateSubnetA
      RouteTableId: !Ref StepanOvsyannikovPrivateRouteTable

  StepanOvsyannikovPrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StepanOvsyannikovPrivateSubnetB
      RouteTableId: !Ref StepanOvsyannikovPrivateRouteTable

  StepanOvsyannikovSecGr1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: stepan-ovsyannikov-sec-gr1
      GroupDescription: Security group for project with HTTP, HTTPS, SSH, and app access
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-SecGr1

  StepanOvsyannikovHttpSecGrIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      Description: Allow HTTP from anywhere

  StepanOvsyannikovHttpSecGrIngress8080:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      Description: Allow 8080 HTTP from anywhere

  StepanOvsyannikovHttpsSecGrIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      Description: Allow HTTPS from anywhere

  StepanOvsyannikovSSHSecGrIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
      CidrIp: 5.152.7.109/32
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      Description: Allow SSH from specified IP

  StepanOvsyannikovRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: stepan-ovsyannikov-rds-sec-gr
      GroupDescription: Security group for RDS PostgreSQL access
      VpcId: !Ref StepanOvsyannikovNetwork
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
          Description: Allow PostgreSQL from EC2 instances
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-RDSSecGr

  StepanOvsyannikovRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: StepanOvsyannikovPostgres
      Engine: postgres
      EngineVersion: "16"
      DBInstanceClass: db.t4g.micro
      AllocatedStorage: 20
      StorageType: gp2
      DBName: !Ref RDSDBName
      MasterUsername: !Ref RDSMasterUsername
      MasterUserPassword: !Ref RDSMasterPassword
      VPCSecurityGroups:
        - !GetAtt StepanOvsyannikovRDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref StepanOvsyannikovDBSubnetGroup
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-RDS

  StepanOvsyannikovDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: stepan-ovsyannikov-dbsubnetgroup
      DBSubnetGroupDescription: Subnet group for RDS in private subnet
      SubnetIds:
        - !Ref StepanOvsyannikovPrivateSubnetA
        - !Ref StepanOvsyannikovPrivateSubnetB

  StepanOvsyannikovDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-SpringBootDBPassword" # Unique name for the secret
      Description: RDS Master Credentials for Spring Boot application.
      SecretString: !Sub |
        {
          "username": "${RDSMasterUsername}",
          "password": "${RDSMasterPassword}",
          "host": "${StepanOvsyannikovRDS.Endpoint.Address}",
          "port": "${StepanOvsyannikovRDS.Endpoint.Port}",
          "dbname": "${RDSDBName}"
        }
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SpringBootDBPassword"
    DependsOn: StepanOvsyannikovRDS

  StepanOvsyannikovEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StepanOvsyannikovSecretManagerReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref StepanOvsyannikovDBSecret

  StepanOvsyannikovEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref StepanOvsyannikovEC2Role
      Path: "/"

  StepanOvsyannikovLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: stepan-ovsyannikov-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref StepanOvsyannikovAMI
        InstanceType: !Ref StepanOvsyannikovInstanceType
        KeyName: stepan-ovsyannikov-keypair-1
        SecurityGroupIds:
          - !GetAtt StepanOvsyannikovSecGr1.GroupId
        IamInstanceProfile:
          Arn: !GetAtt StepanOvsyannikovEC2InstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            
            # Install Java if not present
            if ! command -v java &> /dev/null; then
                yum install -y java-17-amazon-corretto
            fi
            
            # Export Secret ID to environment variable.
            # Your Spring Boot application will use this ID to fetch ALL credentials.
            echo "export SECRET_ID=${StepanOvsyannikovDBSecret}" > /etc/profile.d/springboot-env.sh
            
            # Source the environment file to make variables available for the current shell session
            source /etc/profile.d/springboot-env.sh

            # Ensure your systemd service 'spring-boot-app.service' is configured to load
            # environment variables from '/etc/profile.d/springboot-env.sh'.
            # This is typically done by adding 'EnvironmentFile=/etc/profile.d/springboot-env.sh'
            # to the [Service] section of your systemd unit file.
            
            systemctl daemon-reload
            systemctl enable spring-boot-app.service
            systemctl start spring-boot-app.service

  StepanOvsyannikovAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref StepanOvsyannikovLaunchTemplate
        Version: !GetAtt StepanOvsyannikovLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref StepanOvsyannikovPublicSubnetA
        - !Ref StepanOvsyannikovPublicSubnetB
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref StepanOvsyannikovTargetGroup
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-AutoScalingGroup
          PropagateAtLaunch: true

  StepanOvsyannikovScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref StepanOvsyannikovAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0

  StepanOvsyannikovLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: stepan-ovsyannikov-load-balancer
      Subnets:
        - !Ref StepanOvsyannikovPublicSubnetA
        - !Ref StepanOvsyannikovPublicSubnetB
      SecurityGroups:
        - !GetAtt StepanOvsyannikovSecGr1.GroupId
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-LoadBalancer

  StepanOvsyannikovTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: stepan-ovsyannikov-TargetGroup
      VpcId: !Ref StepanOvsyannikovNetwork
      Port: 8080
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /api/metadata
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-TargetGroup

  StepanOvsyannikovListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref StepanOvsyannikovLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref StepanOvsyannikovTargetGroup
