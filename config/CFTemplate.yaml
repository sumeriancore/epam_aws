AWSTemplateFormatVersion: 2010-09-09
Description: Epam AWS CloudFormation Template with full Secrets Manager Integration for RDS Credentials.

Parameters:
  StepanOvsyannikovAMI:
    Type: String
    Default: ami-03c48c14ef28d4eb7
    Description: AMI ID for the EC2 instances.
  StepanOvsyannikovInstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for the application.
  DBInstanceIdentifier:
    Type: String
    Default: stepan-ovsyannikov-db
  RDSDBName:
    Type: String
    Default: StepanOvsyannikovDb
    Description: Name for the RDS PostgreSQL database.
  RDSMasterUsername:
    Type: String
    Default: postgres
    Description: Master username for the RDS PostgreSQL database.
  RDSMasterPassword:
    Type: String
    Description: Master password for the RDS PostgreSQL database.
    NoEcho: true
  LambdaCodeS3BucketName:
    Type: String
    Default: stepan-ovsyannikov-bucket1
    Description: Имя S3 бакета, где хранится Zip-файл с кодом Lambda.
  LambdaCodeS3Key:
    Type: String
    Default: index.zip
    Description: Ключ (путь к файлу) Zip-файла с кодом Lambda в S3 бакете.

Resources:
  # Network
  StepanOvsyannikovNetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-Network

  StepanOvsyannikovInternetGateWay:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-InternetGateWay

  StepanOvsyannikovVPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref StepanOvsyannikovInternetGateWay
      VpcId: !Ref StepanOvsyannikovNetwork

  StepanOvsyannikovPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: "us-east-1a"
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PublicSubnet-A

  StepanOvsyannikovPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: "us-east-1b"
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PublicSubnet-B

  StepanOvsyannikovPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.13.0/24
      AvailabilityZone: "us-east-1a"
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PrivateSubnet-A

  StepanOvsyannikovPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.14.0/24
      AvailabilityZone: "us-east-1b"
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PrivateSubnet-B

  StepanOvsyannikovRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-RouteTable

  StepanOvsyannikovRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref StepanOvsyannikovRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref StepanOvsyannikovInternetGateWay

  StepanOvsyannikovSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StepanOvsyannikovPublicSubnetA
      RouteTableId: !Ref StepanOvsyannikovRouteTable

  StepanOvsyannikovSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StepanOvsyannikovPublicSubnetB
      RouteTableId: !Ref StepanOvsyannikovRouteTable

  StepanOvsyannikovPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-PrivateRouteTable

  StepanOvsyannikovPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StepanOvsyannikovPrivateSubnetA
      RouteTableId: !Ref StepanOvsyannikovPrivateRouteTable

  StepanOvsyannikovPrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StepanOvsyannikovPrivateSubnetB
      RouteTableId: !Ref StepanOvsyannikovPrivateRouteTable

  StepanOvsyannikovSecGr1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: stepan-ovsyannikov-sec-gr1
      GroupDescription: Security group for project with HTTP, HTTPS, SSH, and app access
      VpcId: !Ref StepanOvsyannikovNetwork
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-SecGr1

  StepanOvsyannikovHttpSecGrIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      Description: Allow HTTP from anywhere

  StepanOvsyannikovHttpSecGrIngress8080:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      Description: Allow 8080 HTTP from anywhere

  StepanOvsyannikovHttpsSecGrIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      Description: Allow HTTPS from anywhere

  StepanOvsyannikovSSHSecGrIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
      CidrIp: 5.152.7.109/32
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      Description: Allow SSH from specified IP

  StepanOvsyannikovRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: stepan-ovsyannikov-rds-sec-gr
      GroupDescription: Security group for RDS PostgreSQL access
      VpcId: !Ref StepanOvsyannikovNetwork
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt StepanOvsyannikovSecGr1.GroupId
          Description: Allow PostgreSQL from EC2 instances
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-RDSSecGr

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AvailabilityZone: "us-east-1a"
      EnableIAMDatabaseAuthentication: true
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      Engine: postgres
      EngineVersion: "15.7"
      DBInstanceClass: db.t4g.micro
      AllocatedStorage: 20
      MasterUsername: !Ref RDSMasterUsername
      MasterUserPassword: !Ref RDSMasterPassword
      DBName: !Ref RDSDBName
      VPCSecurityGroups:
        - !GetAtt StepanOvsyannikovRDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref StepanOvsyannikovDBSubnetGroup
      DBParameterGroupName: !Ref StepanOvsyannikovRDSParameterGroup
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-RDS

  StepanOvsyannikovRDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Parameter group for PostgreSQL with IAM authentication enabled
      Family: postgres15
      Parameters:
        log_connections: "1"
        log_disconnections: "1"

  StepanOvsyannikovDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: stepan-ovsyannikov-dbsubnetgroup
      DBSubnetGroupDescription: Subnet group for RDS in private subnet
      SubnetIds:
        - !Ref StepanOvsyannikovPrivateSubnetA
        - !Ref StepanOvsyannikovPrivateSubnetB

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RDSConnectPolicyForEC2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${DBInstanceIdentifier}/iam_database_user"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-EC2InstanceProfile"
      Roles:
        - !Ref EC2InstanceRole

  StepanOvsyannikovLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: stepan-ovsyannikov-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref StepanOvsyannikovAMI
        InstanceType: !Ref StepanOvsyannikovInstanceType
        KeyName: stepan-ovsyannikov-keypair-1
        SecurityGroupIds:
          - !GetAtt StepanOvsyannikovSecGr1.GroupId
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
  
            # CloudFormation разрешит !GetAtt и !Ref ЗДЕСЬ
            echo "export SPRING_DATASOURCE_URL=jdbc:postgresql://${MyRDSInstance.Endpoint.Address}:${MyRDSInstance.Endpoint.Port}/${RDSDBName}" >> /etc/profile.d/app-env.sh
            echo "export SPRING_DATASOURCE_USERNAME=${RDSMasterUsername}" >> /etc/profile.d/app-env.sh
            echo "export DB_NAME=${RDSDBName}" >> /etc/profile.d/app-env.sh
            echo "export AWS_REGION=${AWS::Region}" >> /etc/profile.d/app-env.sh
  
            cat <<EOF | sudo tee /opt/your-spring-app/start_app_with_db_check.sh
            #!/bin/bash
            . /etc/profile.d/app-env.sh
  
            echo "Waiting for RDS database to be available at ${MyRDSInstance.Endpoint.Address}:${MyRDSInstance.Endpoint.Port}..."
            timeout=60 # 5 минут
            counter=0
            while ! nc -z -v -w 5 "${MyRDSInstance.Endpoint.Address}" "${MyRDSInstance.Endpoint.Port}"; do 
              echo "RDS not yet available. Waiting..."
              sleep 5
              counter=\$((counter+5))
              if [ \$counter -ge \$timeout ]; then
                echo "Timeout waiting for RDS. Exiting."
                exit 1
              fi
            done
            echo "RDS is available. Starting Spring Boot application..."
  
            exec java -jar /opt/your-spring-app/your-spring-app-0.0.1-SNAPSHOT.jar
            EOF
  
            sudo chmod +x /opt/your-spring-app/start_app_with_db_check.sh
  
            sudo systemctl start your-spring-app.service    

  StepanOvsyannikovAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref StepanOvsyannikovLaunchTemplate
        Version: !GetAtt StepanOvsyannikovLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref StepanOvsyannikovPublicSubnetA
        - !Ref StepanOvsyannikovPublicSubnetB
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref StepanOvsyannikovTargetGroup
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-AutoScalingGroup
          PropagateAtLaunch: true
    DependsOn:
      - MyRDSInstance
      - MyRDSInitializerLambda

  StepanOvsyannikovScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref StepanOvsyannikovAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0

  StepanOvsyannikovLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: stepan-ovsyannikov-load-balancer
      Subnets:
        - !Ref StepanOvsyannikovPublicSubnetA
        - !Ref StepanOvsyannikovPublicSubnetB
      SecurityGroups:
        - !GetAtt StepanOvsyannikovSecGr1.GroupId
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-LoadBalancer

  StepanOvsyannikovTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: stepan-ovsyannikov-TargetGroup
      VpcId: !Ref StepanOvsyannikovNetwork
      Port: 8080
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /api/metadata
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance
      Tags:
        - Key: Name
          Value: stepan-ovsyannikov-TargetGroup

  StepanOvsyannikovListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref StepanOvsyannikovLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref StepanOvsyannikovTargetGroup

  MyLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda to connect to RDS and respond to CloudFormation
      VpcId: !Ref StepanOvsyannikovNetwork
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          DestinationSecurityGroupId: !GetAtt StepanOvsyannikovRDSSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  MyDBSecurityGroupIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StepanOvsyannikovRDSSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt MyLambdaSecurityGroup.GroupId
    DependsOn:
      - StepanOvsyannikovRDSSecurityGroup
      - MyLambdaSecurityGroup

  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RDSConnectPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: rds-db:connect
                Resource: "*"
        - PolicyName: LambdaVPCAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: CloudFormationS3ResponsePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource: "*"

  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-lambda-code-${AWS::AccountId}"
      Tags:
        - Key: Name
          Value: LambdaCodeBucket

  MyRDSInitializerLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaCodeBucket
    Properties:
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Runtime: nodejs22.x
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DB_MASTER_USERNAME: !Ref RDSMasterUsername
          DB_MASTER_PASSWORD: !Ref RDSMasterPassword
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt MyLambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref StepanOvsyannikovPrivateSubnetA
      Code:
        S3Bucket: !Ref LambdaCodeS3BucketName
        S3Key: !Ref LambdaCodeS3Key

  MyS3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref StepanOvsyannikovNetwork
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref StepanOvsyannikovPrivateRouteTable
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:*"
            Resource: "*"
      VpcEndpointType: Gateway
